// Generated by CoffeeScript 1.3.3
(function() {
  var apiBase, authorization_code, client_id, client_secret, redirect_uri, request, url;

  request = require('request');

  redirect_uri = '';

  client_id = '';

  client_secret = '';

  authorization_code = true;

  url = 'https://accounts.google.com/o/oauth2/token';

  apiBase = 'https://www.google.com/reader/api/0/';

  module.exports = {
    config: function(config) {
      redirect_uri = config.redirect_uri;
      client_id = config.client_id;
      client_secret = config.client_secret;
    },
    auth: function(callback) {
      var auth_url;
      auth_url = "https://accounts.google.com/o/oauth2/auth?scope=https://www.googleapis.com/auth/cloudprint+https://www.googleapis.com/auth/userinfo.profile&response_type=code&redirect_uri=" + redirect_uri + "&client_id=" + client_id;
      return callback(auth_url);
    },
    getToken: function(reqToken, callback) {
      var params;
      params = {
        "code": reqToken,
        "client_id": client_id,
        "client_secret": client_secret,
        "redirect_uri": redirect_uri,
        "grant_type": "authorization_code"
      };
      return request.post({
        url: url,
        form: params
      }, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(res.statusCode);
        if (res.statusCode === 200) {
          return callback(JSON.parse(body));
        } else {
          return console.log("you're fucked by first one");
        }
      });
    },
    getUser: function(token, callback, i) {
      var _this = this;
      return request.get(apiBase + 'user-info?output=json&access_token=' + token, function(err, res, body) {
        if (err) {
          throw err;
        }
        if (res.statusCode === 200) {
          return callback(null, JSON.parse(body));
        } else if (res.statusCode === 401) {
          return callback({
            code: 'login'
          }, null);
        } else {
          if (!i || i < 4) {
            if (!i) {
              i = 0;
            }
            return setTimeout((function() {
              return _this.getUser(token, callback, i + 1);
            }), 50);
          } else {
            return callback({
              code: 500
            }, null);
          }
        }
      });
    },
    getFeed: function(token, callback) {
      return request.get(apiBase + 'stream/contents?output=json&n=5&access_token=' + token, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(res.statusCode);
        if (res.statusCode === 200) {
          return callback(JSON.parse(body));
        } else {
          return console.log("you're fucked by third one");
        }
      });
    },
    getUnread: function(token, callback) {
      return request.get(apiBase + 'unread-count?output=json&access_token=' + token, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(res.statusCode);
        return callback(JSON.parse(body));
      });
    }
  };

}).call(this);
